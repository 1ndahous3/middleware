#!/bin/sh
#
# $FreeBSD$
#

# PROVIDE: ix-devd
# REQUIRE: ix-zfs
# BEFORE: devd pf

. /etc/rc.subr

#
# Generate CARP hooks right before mountlate.
#
ix_devd_gen()
{
	local IFS=\|

	local failovers=`${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT COUNT(id) FROM system_failover;"`
	local peerip=`${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT ipaddress FROM system_failover LIMIT 1;"`
	local volumenames=`${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT vol_name FROM storage_volume WHERE vol_fstype = 'ZFS';"`

	if [ ${failovers} -gt 0 ]; then
		cp /conf/base/etc/devd.conf /etc/devd.conf
		cat >> /etc/devd.conf << E*O*F

notify 100 {
   match "system"   "IFNET";
   match "subsystem" "carp.*";
   action "/bin/sh -x /etc/carp-state-change-hook \$subsystem \$type | logger";
};
E*O*F

		# Failover script
		cat > /etc/carp-state-change-hook << E*O*F
#!/bin/sh

SUBSYSTEM=\$1
EVENT=\$2

if [ \${SUBSYSTEM} != "carp0" ]; then
	exit
fi

touch -t \`date -v -1M +%Y%m%d%H%M.%S\` /tmp/heartbeat_barrier

# Has the user indicated we should take over?
if  [ -f /tmp/failover_override ] ; then
    USER_OVERRIDE=1
else
    USER_OVERRIDE=0
fi

# Do we have a force seal?
HAVE_FORCESEAL=\`find /tmp/force_seal -mnewer /tmp/heartbeat_barrier | wc -l\`

if [ \${EVENT} = "LINK_UP" ]; then
    echo "Entering UP on \${SUBSYSTEM}!" | logger

    # Was the other peer UP in the last minute?
    WASCONNECTED=\`find /tmp/heartbeat_state -mnewer /tmp/heartbeat_barrier | wc -l\`

    # If we can still ping the peer, quit immediately
    if [ \${USER_OVERRIDE} -eq 0 ] ; then
        ping -qc 1 -t 1 ${peerip} && exit
    fi

    if [ \${HAVE_FORCESEAL} -eq 1 ]; then
	WASCONNECTED=1
    fi

    # Continously pool carp1 and carp2 until we have 5 seconds worth of
    # approval signal.
    if [ \${USER_OVERRIDE} -eq 0 ] ; then
        TIMER1=0
        TIMER2=0

        while [ \${TIMER2} -lt 60 ]; do
	    TIMER2=\$((TIMER2 + 1))

	    STATUS0=\`ifconfig \${SUBSYSTEM} | grep "carp:" | awk '{print \$2}'\`
	    STATUS1=\`(ifconfig carp1 | grep carp: | awk '{print \$2;}' ; ifconfig carp2 | grep carp: | awk '{print \$2;}')| grep MASTER | wc -l\`
	    STATUS2=\`(ifconfig carp1 | grep carp: | awk '{print \$2;}' ; ifconfig carp2 | grep carp: | awk '{print \$2;}')| grep BACKUP | wc -l\`

	    echo \${STATUS0}:\${STATUS1}:\${STATUS2} t1=\${TIMER1} t2=\${TIMER2} | logger

	    if [ \$STATUS0 != "MASTER" ]; then
	        echo "Promoted then demoted, quitting." | logger
	        # Just in case.  Demote ourselves.
	        ifconfig \${SUBSYSTEM} advskew 202
	        exit
	    fi

	    # This catches the case where one head is powered off but the
	    # ethernet link shows as active due to the motherboard receiving
	    # power.  The link speed in this case will be 10baseT and the status
	    # will be active.  This test is not perfect because the physical
	    # failover interface is not explicitely defined, so it would be possible
	    # for another interface in the box to be in this state and "fake out"
	    # the script.
	    if [ \${STATUS1} -eq 2 -a \${STATUS2} -eq 0 ] ; then
	        if [ \$WASCONNECTED -ne 1 ]; then
		    for i in \`ifconfig -lu\`
		    do
		        ifconfig \$i | grep 10baseT/UTP
		        if [ \$? -eq 0 ] ; then
			    LINKSTATUS=\`ifconfig \$i | grep status | awk '{print \$2}'\`
			    if [ \${LINKSTATUS} == "active" ] ; then
			        WASCONNECTED=1
			    fi
		        fi
	            done
	        fi
	        TIMER1=\$((TIMER1 + 1))
	    else
	        TIMER1=0
	    fi
	    if [ \${TIMER1} -ge 7 ]; then
	        echo "Received 7 positive approvals, proceeding" | logger
	        break
	    fi
	    sleep 1
        done

        if [ \${TIMER1} -lt 7 ]; then
	    echo "PANIC! Retry exhausted" | logger
	    # Just in case.  Demote ourselves.
	    ifconfig \${SUBSYSTEM} advskew 200
	    exit
        fi
    fi

    # Bail out if this is not a warm takeover, and the heartbeat cable
    # did not give us an approval.
    if [ \${USER_OVERRIDE} -eq 0 ] ; then
        if [ \$WASCONNECTED -ne 1 ]; then
	    exit
        fi
    fi

    ifconfig \${SUBSYSTEM} advskew 1
    for volumename in ${volumenames}; do
	/sbin/zpool import -o cachefile=none -R /mnt -f \${volumename}
	/sbin/zpool set cachefile=/data/zfs/zpool.cache \${volumename}
    done

    #mount -uw /
    /etc/rc.d/statd restart
    /usr/sbin/service ix-nfsd quietstart
    /usr/sbin/service mountd restart
    /usr/sbin/service nfsd restart
    /usr/sbin/service ix-istgt quietstart
    /usr/sbin/service istgt forcestop
    /usr/sbin/service istgt restart
#
# There appears to be a small lag if we allow NFS traffic right away.  During
# this time, we fail NFS requests with ESTALE to the remote system.  This
# gives remote clients heartburn, so rather than try to deal with the
# downstream effect of that, instead we take a chill pill for 2 seconds.
#
    sleep 1
    echo "pass quick on \${SUBSYSTEM} keep state" > /etc/pf.conf
    pfctl -f /etc/pf.conf
    echo "\$(date), \$(hostname), assume master" | mail -s "Failover" root

    if  [ -f /tmp/failover_override ] ; then
        rm /tmp/failover_override
    fi
fi

if [ \${EVENT} = "LINK_DOWN" ]; then
    echo "Entering DOWN!" | logger
    ifconfig \${SUBSYSTEM} advskew 100
    echo "set block-policy drop" > /etc/pf.conf.block
    echo "block drop in quick proto tcp from any to any port 860" >> /etc/pf.conf.block
    echo "block drop in quick proto udp from any to any port 860" >> /etc/pf.conf.block
    echo "block drop in quick proto tcp from any to any port 2049" >> /etc/pf.conf.block
    echo "block drop in quick proto udp from any to any port 2049" >> /etc/pf.conf.block
    echo "block drop in quick proto tcp from any to any port 3260" >> /etc/pf.conf.block
    echo "block drop in quick proto udp from any to any port 3260" >> /etc/pf.conf.block
    pfctl -f /etc/pf.conf.block
    /etc/rc.d/statd stop
    /etc/rc.d/watchdogd stop
    watchdog -t 4
    for volumename in ${volumenames}; do
	echo "Exporting ${volumename}!" | logger
	zpool export -f ${volumename} || (zpool status ${volumename} && sleep 5)
	echo "Exported ${volumename}!" | logger
    done
    watchdog -t 0
    /etc/rc.d/watchdogd start
    echo "\$(date), \$(hostname), assume backup" | mail -s "Failover" root
fi

E*O*F
	else
		/usr/bin/truncate -s 0 /etc/pf.conf
	fi
}

name="ix-devd"
start_cmd='ix_devd_gen'
stop_cmd=':'

load_rc_config $name
run_rc_command "$1"
