#!/usr/bin/env python
# -
# Copyright (c) 2015 iXsystems, Inc.
# All rights reserved.
# This file is a part of TrueNAS
# and may not be copied and/or distributed
# without the express permission of iXsystems.

import argparse
import os
import sys

sys.path.extend([
    '/usr/local/www',
    '/usr/local/www/freenasUI',
])

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'freenasUI.settings')

# Make sure to load all modules
from django.db.models.loading import cache
cache.get_apps()

from freenasUI.middleware.notifier import notifier
from freenasUI.failover.models import Failover
from freenasUI.failover.utils import failover_disabled_reasons
_not = notifier()


def main(command, quiet):
    fo_exists = Failover.objects.all().exists()
    if command == "status":
        ret = _not.failover_status()
        if ret == "MASTER":
            print "Node status: Active"
        elif ret == "BACKUP":
            print "Node status: Passive"
        elif ret == "ELECTING":
            print "Node status: Electing master node"
        elif ret == "IMPORTING":
            print "Node status: Transitioning to Active"
        elif ret == "ERROR":
            print "Node status: Faulted"
        elif ret == "SINGLE":
            if not quiet:
                print "Node status: Not an HA node"
            sys.exit(0)
        elif ret == "UNKNOWN" and fo_exists:
            print "Node status: Passive (Master mode unreachable)"

        if fo_exists:
            if failover_disabled_reasons():
                print "Failover status: Disabled"
            else:
                print "Failover status: Enabled"
        else:
                print "Failover status: Not configured"

    elif command == "enable":
        if not fo_exists:
            print("Not configured for failover. "
                  "There's nothing to enable here.")
            sys.exit(7)
        if Failover.objects.all()[0].disabled is True:
            s = _not.failover_rpc()
            try:
                if s is None:
                    raise ValueError
                s.hactl('enable')
                for item in Failover.objects.all():
                    item.disabled = False
                    item.save()
                os.system("/usr/sbin/service ix-devd start")
                print "Failover enabled."
                sys.exit(0)
            except Exception,e:
                print "Unable to contact remote node.  Failover not enabled."
                print e
                sys.exit(2)
        else:
            print "Failover not disabled.  Cannot enable!"
            sys.exit(3)
    elif command == "disable":
        if not fo_exists:
            print("Not configured for failover. "
                  "There's nothing to disable here.")
            sys.exit(8)
        if Failover.objects.all()[0].disabled is False:
            s = _not.failover_rpc()
            if (_not.failover_status() == "MASTER" or
                    _not.failover_status() == "IMPORTING"):
                status = "master"
                try:
                    ret = s.hactl('disable', ['passive'])
                except:
                    ret = False
            else:
                status = "passive"
                try:
                    ret = s.hactl('disable', ['active'])
                except:
                    ret = False
            if ret is not False:
                for item in Failover.objects.all():
                    item.disabled = True
                    if status == "master":
                        item.master = True
                    else:
                        item.master = False
                    item.save()
                    print "Failover disabled."
                    os.system("/usr/sbin/service ix-devd start")
                    sys.exit(0)
            else:
                print "Unable to contact remote node.  Failover not disabled."
                sys.exit(3)
        else:
            print "Failover not enabled.  Cannot disable!"

    elif command == "takeover":
        ret = _not.failover_status()
        if ret != "BACKUP":
            print "Cannot takeover volume, not passive"
            sys.exit(5)
        print "This will likely cause the active node to reboot."
        while True:
            ret = raw_input("Are you sure you wish to proceed with making "
                            "this node active? (y/n): ")
            if ret.lower() == "y":
                break
            elif ret.lower() == "n":
                print "Takeover cancelled."
                sys.exit(1)
            else:
                continue
        _not.failover_force_master()
    elif command == "giveback":
        ret = _not.failover_status()
        if ret == "BACKUP":
            print "Cannot giveback volume.  This unit is not Active!"
            sys.exit(6)
        print "Volume giveback will reboot this node."
        while True:
            ret = raw_input("Are you sure you wish to proceed with making "
                            "the other node active? (y/n): ")
            if ret.lower() == "y":
                break
            elif ret.lower() == "n":
                print "Giveback cancelled."
                sys.exit(1)
            else:
                continue
        os.system("shutdown -r now")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='HA CLI control utility.')
    parser.add_argument('command',
                        default="status",
                        nargs='?',
                        help=("subcommand: enable disable status takeover "
                              "giveback"),
                        choices=['enable', 'disable', 'status',
                                 'takeover', 'giveback'],
                        )
    parser.add_argument('-q',
                        help="Be silent if this is a non HA node",
                        action='store_true'
                        )

    args = parser.parse_args()
    main(args.command, args.q)
