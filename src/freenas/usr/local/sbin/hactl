#!/usr/bin/env python
#-
# Copyright (c) 2015 iXsystems, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

import argparse
import datetime
import logging
import os
import subprocess
import sys

sys.path.extend([
    '/usr/local/www',
    '/usr/local/www/freenasUI',
])

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'freenasUI.settings')

# Make sure to load all modules
from django.db.models.loading import cache
cache.get_apps()

from freenasUI.middleware.notifier import notifier
_not = notifier()

def main(command):
    if command == "status":
        ret = _not.failover_status()
        if ret == "MASTER":
            print "Node status: Active"
        elif ret == "BACKUP":
            print "Node status: Passive"
        elif ret == "ELECTING":
            print "Node status: Electing master node"
        elif ret == "iIMPORTING":
            print "Node status: Transitioning to Active"
        elif ret == "ERROR":
            print "Node status: Faulted"
        elif ret == "SINGLE":
            print "Node status: Not an HA node"
    elif command == "enable":
        # TODO: Impliment enable method here
        print "Currently unimplimented"
    elif command == "disable":
        # TODO: Impliment disable method here
        print "Currently unimplimented"
    elif command == "takeover":
        # TODO: Impliment takeover method here
        print "Currently unimplimented"
    elif command == "giveback":
        # TODO: Impliment giveback method here
        print "Currently unimplimented"

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='HA CLI control utility.')
    parser.add_argument('command',
                        default="status",
                        nargs='?',
                        help="""subcommand: enable disable status takeover giveback""",
                        choices=['enable', 'disable', 'status', 'takeover', 'giveback'],
                        )
                        
    args = parser.parse_args()
    main(args.command)
