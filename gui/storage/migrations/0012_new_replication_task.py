# -*- coding: utf-8 -*-
# Generated by Django 1.10.8 on 2018-10-17 04:46
from __future__ import unicode_literals

import os

from django.db import migrations, models
import django.db.models.deletion

import freenasUI.freeadmin.models.fields


def process_ssh_keyscan_output(output):
    return [" ".join(line.split()[1:]) for line in output.split("\n") if line and not line.startswith("# ")][-1]


def is_child(child: str, parent: str):
    rel = os.path.relpath(child, parent)
    return rel == "." or not rel.startswith("..")


def migrate_replremotes(apps, schema_editor):
    ReplRemote = apps.get_model('storage', 'ReplRemote')
    KeychainCredential = apps.get_model('system', 'KeychainCredential')

    legacy_replication_key_pair = None
    if os.path.exists("/data/ssh/replication") and os.path.exists("/data/ssh/replication.pub"):
        with open("/data/ssh/replication") as f:
            private_key = f.read()

        with open("/data/ssh/replication.pub") as f:
            public_key = f.read()

        legacy_replication_key_pair = KeychainCredential()
        legacy_replication_key_pair.name = "Legacy Replication SSH Key Pair"
        legacy_replication_key_pair.type = "SSH_KEY_PAIR"
        legacy_replication_key_pair.attributes = {
            "private_key": private_key,
            "public_key": public_key,
        }
        legacy_replication_key_pair.save()

    if legacy_replication_key_pair:
        for repl_remote in ReplRemote.objects.all():
            cipher = "standard"
            ciphers = set(
                replication.ssh_cipher
                for replication in repl_remote.replication_set
            )
            if "none" in ciphers:
                cipher = "none"
            if "fast" in ciphers:
                cipher = "fast"

            username = (repl_remote.ssh_remote_dedicateduser if repl_remote.ssh_remote_dedicateduser_enabled else 'root')
            credential = KeychainCredential()
            credential.name = f'{username}@{repl_remote.ssh_remote_hostname}'
            credential.type = 'SSH_CREDENTIALS'
            credential.attributes = {
                "host": repl_remote.ssh_remote_hostname,
                "port": repl_remote.ssh_remote_port,
                "username": username,
                "private_key": legacy_replication_key_pair.id,
                "remote_host_key": process_ssh_keyscan_output(repl_remote.ssh_remote_hostkey),
                "cipher": cipher,
                "connect_timeout": 7,
            }
            credential.save()

            for replication in repl_remote.replication_set:
                replication.repl_ssh_credentials = credential
                replication.save()


def migrate_filesystem(apps, schema_editor):
    Replication = apps.get_model('storage', 'Replication')
    for replication in Replication.objects.all():
        replication.repl_source_datasets = [replication.filesystem]
        replication.save()


def migrate_tasks(apps, schema_editor):
    Replication = apps.get_model('storage', 'Replication')
    Task = apps.get_model('storage', 'Task')
    for replication in Replication.objects.all():
        replication.repl_tasks = [
            task
            for task in Task.objects.all()
            if (
                replication.repl_source_datasets[0] == task.filesystem or
                (task.task_recursive and is_child(replication.repl_source_datasets[0], task.filesystem))
            )
        ]
        replication.save()


def migrate_followdelete(apps, schema_editor):
    Replication = apps.get_model('storage', 'Replication')
    for replication in Replication.objects.all():
        if replication.repl_followdelete:
            replication.repl_retention_policy = "source"
            replication.save()


class Migration(migrations.Migration):

    dependencies = [
        ('storage', '0011_new_periodic_snapshot_task'),
        ('system', '0031_keychain_credential'),
    ]

    operations = [
        migrations.RenameField(
            model_name='task',
            old_name='task_ret_unit',
            new_name='task_lifetime_unit',
        ),
        migrations.RenameField(
            model_name='task',
            old_name='task_ret_count',
            new_name='task_lifetime_value',
        ),

        migrations.AddField(
            model_name='replication',
            name='repl_direction',
            field=models.CharField(choices=[('push', 'PUSH'), ('pull', 'PULL')], default='push', max_length=4,
                                   verbose_name='Replication Direction'),
        ),

        migrations.AddField(
            model_name='replication',
            name='repl_transport',
            field=models.CharField(
                choices=[('ssh', 'SSH'), ('ssh+netcat', 'SSH+netcat'), ('local', 'Local'), ('legacy', 'Legacy')],
                default='legacy', max_length=10, verbose_name='Replication Direction'),
        ),

        migrations.AddField(
            model_name='replication',
            name='repl_ssh_credentials',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='system.KeychainCredential', verbose_name='Remote Host'),
        ),
        migrations.RunPython(migrate_replremotes),
        migrations.RemoveField(
            model_name='replication',
            name='repl_remote',
        ),
        migrations.DeleteModel(
            name='ReplRemote',
        ),

        migrations.AddField(
            model_name='replication',
            name='repl_netcat_active_side',
            field=models.CharField(choices=[('local', 'Local'), ('remote', 'Remote')], default=None, max_length=5, null=True, verbose_name='Netcat Active Side'),
        ),
        migrations.AddField(
            model_name='replication',
            name='repl_netcat_active_side_port_min',
            field=models.PositiveIntegerField(null=True, verbose_name='Netcat Active Side Min Port'),
        ),
        migrations.AddField(
            model_name='replication',
            name='repl_netcat_active_side_port_max',
            field=models.PositiveIntegerField(null=True, verbose_name='Netcat Active Side Max Port'),
        ),

        migrations.AddField(
            model_name='replication',
            name='repl_source_datasets',
            field=freenasUI.freeadmin.models.fields.ListField(default=[], verbose_name='Source Datasets'),
            preserve_default=False,
        ),
        migrations.RunPython(migrate_filesystem),
        migrations.RemoveField(
            model_name='replication',
            name='repl_filesystem',
        ),
        migrations.AlterModelOptions(
            name='replication',
            options={'verbose_name': 'Replication Task', 'verbose_name_plural': 'Replication Tasks'},
        ),

        migrations.RenameField(
            model_name='replication',
            old_name='repl_zfs',
            new_name='repl_target_dataset',
        ),

        migrations.RenameField(
            model_name='replication',
            old_name='repl_userepl',
            new_name='repl_recursive',
        ),

        migrations.AddField(
            model_name='replication',
            name='repl_exclude',
            field=freenasUI.freeadmin.models.fields.ListField(default=[], verbose_name='Exclude child datasets'),
            preserve_default=False,
        ),

        migrations.AddField(
            model_name='replication',
            name='repl_tasks',
            field=models.ManyToManyField(related_name='replication_tasks', to='storage.Task'),
        ),
        migrations.RunPython(migrate_tasks),

        migrations.AddField(
            model_name='replication',
            name='repl_also_include_naming_schema',
            field=models.CharField(blank=True, max_length=120,
                                   verbose_name='Also replicate snapshots matching naming schema'),
        ),
        migrations.AddField(
            model_name='replication',
            name='repl_auto',
            field=models.BooleanField(default=True, verbose_name='Run automatically'),
            preserve_default=False,
        ),

        migrations.AddField(
            model_name='replication',
            name='repl_minute',
            field=models.CharField(default='*', help_text='Values allowed:<br>Slider: 0-30 (as it is every Nth minute).<br>Specific Minute: 0-59.', max_length=100, verbose_name='Minute'),
        ),
        migrations.AddField(
            model_name='replication',
            name='repl_hour',
            field=models.CharField(default='*', help_text='Values allowed:<br>Slider: 0-12 (as it is every Nth hour).<br>Specific Hour: 0-23.', max_length=100, verbose_name='Hour'),
        ),
        migrations.AddField(
            model_name='replication',
            name='repl_daymonth',
            field=models.CharField(default='*', help_text='Values allowed:<br>Slider: 0-15 (as its is every Nth day).<br>Specific Day: 1-31.', max_length=100, verbose_name='Day of month'),
        ),
        migrations.AddField(
            model_name='replication',
            name='repl_month',
            field=models.CharField(default='*', max_length=100, verbose_name='Month'),
        ),
        migrations.AddField(
            model_name='replication',
            name='repl_dayweek',
            field=models.CharField(default='*', max_length=100, verbose_name='Day of week'),
        ),

        migrations.AddField(
            model_name='replication',
            name='repl_only_matching_schedule',
            field=models.BooleanField(default=False,
                                      verbose_name='Only replicate snapshots matching schedule'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='replication',
            name='repl_allow_from_scratch',
            field=models.BooleanField(default=True,
                                      verbose_name='Replicate from scratch if incremental is not possible'),
            preserve_default=False,
        ),

        migrations.AddField(
            model_name='replication',
            name='repl_retention_policy',
            field=models.CharField(choices=[('source', 'Same as source'), ('custom', 'Custom'), ('none', 'None')], default='none', max_length=5, verbose_name='Snapshot retention policy'),
        ),
        migrations.RunPython(migrate_followdelete),
        migrations.RemoveField(
            model_name='replication',
            name='repl_followdelete',
        ),

        migrations.RenameField(
            model_name='replication',
            old_name='repl_limit',
            new_name='repl_speed_limit',
        ),

        migrations.RemoveField(
            model_name='replication',
            name='repl_lastsnapshot',
        ),
    ]
